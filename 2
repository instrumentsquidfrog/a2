def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        if arg3 < arg3:
            var9 = class3()
        else:
            var9 = class5()
        for var10 in range(4):
            var11 = var9.func4
            var11(arg1, var10)
        var14 = class7()
        for var15 in range(11):
            var14.func8(arg2, arg1)
        var16 = -531392906 + (2112584648 | 433 ^ arg3 ^ (arg2 ^ 126) + -1901925528) + (((-744 ^ (arg1 + arg1)) - arg1 + -970 | arg2 + 1053460450 + (arg2 ^ ((arg4 | 665078464) & arg4)) - 546185443 + arg1) + arg1) ^ arg3
        var17 = -720 | var16 & -286127843 ^ 888
        var18 = var17 | var16
        var19 = (arg2 ^ arg1) - ((arg4 + var16) + ((((arg4 + 65365897 & var18 | -271425439) + var17 + arg3) - arg3) | var18) ^ arg2) | arg4
        result = (((arg3 - (arg4 + arg3) - (802753764 | var17 | (421 ^ 177)) ^ var16) + arg3) + var18 ^ arg1) ^ arg1
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(arg2, var20)
    var35 = func12(arg1, var20)
    if var31 < var31:
        var36 = var31 & arg1
    else:
        var36 = (var31 & var20) - -913127691
    var37 = var31 - 1720776527
    if arg2 < var37:
        var38 = arg2 & var35 & 680646434 - var20
    else:
        var38 = var35 | (var20 | arg2 - 484)
    var39 = var37 ^ (var20 + var31)
    var40 = (arg2 | (var35 | var35)) & var35
    var41 = 173827961 | 812 & 62 ^ -904512486
    var42 = var40 ^ (var37 + var20) + var41
    var43 = 1459093536 + var42 + arg2 - var35
    var44 = (var31 & (var39 | arg2)) ^ 421636058
    var45 = (var35 & var44 + var37) & var39
    var46 = (var39 ^ 37 - var43) & var31
    var47 = var42 | ((var31 - -354) | var31)
    var48 = var37 - ((190787496 + 629593475) - var41)
    var49 = (var43 & var20 & var43) ^ var44
    var50 = arg2 - arg1
    var51 = (var40 - var35) - var50
    var52 = (var44 & var43) + var20
    var53 = var49 - var20 - var37 + var35
    var54 = var46 ^ var35 ^ var50
    var55 = var43 & var39 | arg1 & var52
    var56 = arg2 | var49
    result = var48 | 1277952150
    return result
def func11(arg24, arg25):
    var26 = 655965416 | 597703075
    var27 = arg24 - var26 ^ arg25 - arg25
    var28 = (var27 | (var27 | arg25) + 64 - var26) | (var27 & 481 ^ (arg25 | ((var26 - ((942799515 + arg25) ^ var26)) & 778989536 | 2121258012 | arg25 | var27 & arg24 | (149 ^ 956)))) - (var27 | -1759367077) + -633
    var29 = var28 ^ arg25
    var30 = var26 | (((arg24 | 263) & arg24 & var28 | arg25 | (arg25 | var29)) ^ arg25) | arg25
    result = (var27 - arg25) - var27 & (var26 & (var26 & (var28 ^ var28 ^ arg25 | var28 ^ var26 ^ var29 & -1361804593)))
    return result
def func10():
    closure = [-9]
    def func9(arg21, arg22):
        closure[0] += func11(arg21, arg22)
        return closure[0]
    func = func9
    return func
var23 = func10()
class class7(object):
    def func8(self, arg12, arg13):
        result = -1593938594 & (1 & 0 | 0) | arg13 & 1893755414
        return result
class class5(object):
    def func4(self, arg7, arg8):
        return 0
class class3(class5):
    def func4(self, arg5, arg6):
        return 0
def func12(arg32, arg33):
    closure = [0]
    def func13(acc, rest):
        var34 = 6 ^ -2 - -2 & -10 - rest ^ -2
        closure[0] += var34
        if acc == 0:
            return var34
        else:
            result = func13(acc - 1, var34)
            return result
    result = func13(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
